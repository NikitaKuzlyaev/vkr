# Import libraries
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
import random

def solve():
    a, b, c = [1.72, 3.45, 3.96]
    a, b, c = random.randint(100, 400)/100, random.randint(100, 400)/100, random.randint(100, 400)/100
    print(a,b,c)
    x = np.arange(0, 5, 0.01)
    y = np.arange(0, 5, 0.01)
    xgrid, ygrid = np.meshgrid(x, y)

    def mn_find():
        ac = 1 - (xgrid + ygrid)
        bc = b * xgrid - (1 + ygrid)
        cc = c * ygrid - (1 + xgrid)

        r = ac.copy()
        #print(r)
        #print(r.shape[0])
        mx = -10000
        cf = [1,1,1]

        for i in range(ac.shape[0]):
            for j in range(ac.shape[1]):
                r[i][j] = min(r[i][j], bc[i][j], cc[i][j])
                if r[i][j] > mx:
                    mx = r[i][j]
                    cf = [1, xgrid[i][j], ygrid[i][j]]

        if abs(max(cf) - 5) < 0.1:
            print("Fail")
        else:
            print(mx)
            print(cf)

        return r

    zgrid = mn_find()
    fig = plt.figure(figsize=(9, 6))
    ax_3d = fig.add_subplot(projection='3d')

    # Creating plot
    ax_3d.plot_surface(xgrid, ygrid, zgrid, rstride=5, cstride=5)

    # zgrid = c * ygrid - (1 + xgrid)
    # ax_3d.plot_surface(xgrid, ygrid, zgrid, rstride=5, cstride=5, cmap='plasma')
    # show plot
    plt.show()


for i in range(1):
    solve()

"""
# zgrid = np.min(1-(xgrid+ygrid), b*xgrid-(1+ygrid), c*ygrid-(1+xgrid))

zgrid = mn_find()

fig = plt.figure(figsize=(9, 6))
ax_3d = fig.add_subplot(projection='3d')

# Creating plot
ax_3d.plot_surface(xgrid, ygrid, zgrid, rstride=5, cstride=5)

#zgrid = c * ygrid - (1 + xgrid)
#ax_3d.plot_surface(xgrid, ygrid, zgrid, rstride=5, cstride=5, cmap='plasma')
# show plot
plt.show()

"""
